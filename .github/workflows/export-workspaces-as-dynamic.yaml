name: Export Plugins Workspaces as Dynamic
on:
  workflow_call:
    secrets:
      image-registry-user:
        description: User name to be used to push to container image registry
        required: false

      image-registry-password:
        description: Password to be used to push to container image registry
        required: false
    
    inputs:
      node-version:
        description: node-version to execute the export
        type: string
        required: false
        default: ''

      janus-cli-version:
        description: Version of the janus-idp/cli package.
        type: string
        required: false
        default: ''

      upload-project-on-error:
        description: Upload the complete project as a workflow artifact in case of error in order to troubleshoot.
        required: false
        type: boolean
        default: false
      
      workspace-path:
        description: Relative path of a single workspace on which the export workflow should be applied.
        required: false
        type: string

      overlay-branch:
        description: Branch of the overlay structure (current branch by default).
        type: string
        required: false
        default: ''

      overlay-repo:
        description: Repository of the overlay structure (`github.repository` by default).
        type: string
        required: false
        default: ''
  
      publish-container:
        description: Publish a container image for the dynamic plugins
        required: false
        default: false
        type: boolean

      image-repository-prefix:
        description: Repository prefix of the dynamic plugin container images
        type: string
        required: false
  
      image-tag-prefix:
        description: Optional prefix to prepend to the plugin version in the image tag
        type: string
        required: false
  
      last-publish-commit:
        description: Optional commit ID of the last successful publishing of plugin container images
        type: string
        required: false

    outputs:
      published-exports:
        description: 
        value: '${{ jobs.export.outputs.published-exports }}'

      failed-exports:
        description: 
        value: '${{ jobs.export.outputs.failed-exports }}'
        
jobs:
  prepare:
    runs-on: ubuntu-latest

    name: Prepare
    outputs:
      node-version: ${{ steps.set-env-vars.outputs.NODE_VERSION }}
      janus-cli-version: ${{ steps.set-env-vars.outputs.JANUS_CLI_VERSION }}
      backstage-version: ${{ steps.set-env-vars.outputs.BACKSTAGE_VERSION }}
      workspaces: ${{ steps.gather-workspaces.outputs.workspaces }}
      overlay-repo-ref: ${{ steps.set-overlay-repo-ref.outputs.OVERLAY_REPO_REF }}
      overlay-repo: ${{ steps.set-overlay-repo.outputs.OVERLAY_REPO }}

    steps:
      - name: Validate Inputs
        uses: actions/github-script@v7
        env:
          INPUT_WORKSPACE_PATH: ${{ inputs.workspace-path }}
        with:
          script: |
            const workspacePath = core.getInput('workspace_path');
            if (workspacePath.startsWith('/') ||workspacePath.includes('..')) {
              core.setFailed(`Invalid workspace path: ${workspacePath}`);
            }

      - name: Set overlay_ref
        id: set-overlay-repo-ref
        env:
          INPUT_OVERLAY_BRANCH: ${{ inputs.overlay-branch }}
        run: |
          if [[ "${INPUT_OVERLAY_BRANCH}" != "" ]]
          then
            echo "OVERLAY_REPO_REF=${INPUT_OVERLAY_BRANCH}" >> $GITHUB_OUTPUT
          else
            echo "OVERLAY_REPO_REF=${{ github.head_ref || github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Set overlay_repo
        id: set-overlay-repo
        env:
          INPUT_OVERLAY_REPO: ${{ inputs.overlay-repo }}
        run: |
          if [[ "${INPUT_OVERLAY_REPO}" != "" ]]
          then
            echo "OVERLAY_REPO=${INPUT_OVERLAY_REPO}" >> $GITHUB_OUTPUT
          else
            echo "OVERLAY_REPO=${{ github.repository }}" >> $GITHUB_OUTPUT
          fi
  
      - uses: actions/checkout@v4.2.2
        with:
          ref: ${{ steps.set-overlay-repo-ref.outputs.OVERLAY_REPO_REF }}
          repository:  ${{ steps.set-overlay-repo.outputs.OVERLAY_REPO }}

      - name: Set environment variables
        id: set-env-vars
        shell: bash {0}
        env:
          INPUT_NODE_VERSION: ${{ inputs.node-version }}
          INPUT_JANUS_CLI_VERSION: ${{ inputs.janus-cli-version }}
        run: |
          versions=$(cat versions.json)

          NODE_VERSION=$(echo ${versions} | jq -r "if (\"${INPUT_NODE_VERSION}\" == \"\") then (.node // \"20.x\") else \"${INPUT_NODE_VERSION}\" end")
          echo "NODE_VERSION=${NODE_VERSION}" >> $GITHUB_OUTPUT

          JANUS_CLI_VERSION=$(echo ${versions} | jq -r "if (\"${INPUT_JANUS_CLI_VERSION}\" == \"\") then (.cli // \"^3.0.0\") else \"${INPUT_JANUS_CLI_VERSION}\" end")
          echo "JANUS_CLI_VERSION=$JANUS_CLI_VERSION" >> $GITHUB_OUTPUT

          BACKSTAGE_VERSION=$(echo ${versions} | jq -r ".backstage")
          echo "BACKSTAGE_VERSION=$BACKSTAGE_VERSION" >> $GITHUB_OUTPUT

      - name: Gather workspaces
        id: gather-workspaces
        shell: bash
        env:
          INPUT_WORKSPACE_PATH: ${{ inputs.workspace-path }}
        run: |
          workspacePath=''
          if [[ "${INPUT_WORKSPACE_PATH}" != "" ]]
          then
            workspacePath="${INPUT_WORKSPACE_PATH}"
          elif [[ "${{ github.head_ref }}" == "workspaces/"* ]]
          then
            workspacePath="$(echo '${{ github.head_ref }}' | sed -e 's:workspaces/[^_]*__\(.*\)$:workspaces/\1:')"
          fi

          json=$(
            echo -n '['
            for d in $(find workspaces -mindepth 1 -type d)
            do
              if [[ "${workspacePath}" != "" ]] && [[ "${workspacePath}" != "$d" ]]
              then
                continue
              fi

              if [[ -f "${d}/plugins-list.yaml" ]] && [[ -f "${d}/source.json" ]]
              then
                workspace=$(jq -c ". | with_entries(.key = \"plugins-\(.key)\" ) | . += { \"overlay-root\": \"${d}\", \"plugins-root\": (if .\"plugins-repo-flat\" then \".\" else \"${d}\" end)}" ${d}/source.json)
                workspace=$(echo "${workspace}" | sed -e 's;https://github.com/;;')
                echo -n "${comma} ${workspace}"
                comma=','
              fi
            done
            echo -n ']'
          )
          echo "Workspaces to export:"
          echo "$json"

          if [[ "$json" == "[]" ]]
          then
            echo ::error title=No workspaces to export::No workspace has been found to run the workflow on.
            exit 1
          fi

          echo "workspaces=${json}" >> $GITHUB_OUTPUT
  export:
    needs: prepare
    uses: redhat-developer/rhdh-plugin-export-utils/.github/workflows/export-dynamic.yaml@main
    strategy:
      fail-fast: false
      matrix:
        workspace: ${{ fromJSON(needs.prepare.outputs.workspaces) }}

    with:
      plugins-repo: ${{ matrix.workspace.plugins-repo }}
      plugins-repo-ref: ${{ matrix.workspace.plugins-repo-ref }}
      plugins-root: ${{ matrix.workspace.plugins-root }}
      overlay-repo: ${{ needs.prepare.outputs.overlay-repo }}
      overlay-repo-ref: ${{ needs.prepare.outputs.overlay-repo-ref }}
      overlay-root: ${{ matrix.workspace.overlay-root }}
      node-version: ${{ needs.prepare.outputs.node-version }}
      janus-cli-version: ${{ needs.prepare.outputs.janus-cli-version }}
      upload-project-on-error: ${{ inputs.upload-project-on-error }}
      publish-container: ${{ inputs.publish-container }}
      image-repository-prefix: ${{ inputs.image-repository-prefix }}
      image-tag-prefix: ${{ inputs.image-tag-prefix != '' && inputs.image-tag-prefix || format('bs_{0}__', needs.prepare.outputs.backstage-version) }}
      last-publish-commit: ${{ inputs.last-publish-commit }}

    secrets:
      image-registry-password: ${{ secrets.image-registry-password }}
      image-registry-user: ${{ secrets.image-registry-user }}

    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write

  